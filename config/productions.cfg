declaration-list := declaration declaration-list*
declaration-list* := declaration-list
declaration-list* := empty
declaration := var-declaration
declaration := statement
var-declaration := type-specifier id ;
type-specifier := int
type-specifier := double
statement := compound-stmt
statement := expression-stmt
statement := selection-stmt
statement := iteration-stmt
statement := goto-stmt
compound-stmt := { local-declaration-list statement-list }
local-declaration-list := var-declaration local-declaration-list
local-declaration-list := empty
statement-list := statement statement-list
statement-list := empty
selection-stmt := if ( expression ) statement selection-stmt-other
selection-stmt-other := else statement
selection-stmt-other := empty
iteration-stmt := while ( expression ) statement
goto-stmt := continue ;
goto-stmt := break ;
expression-stmt := expression ;
expression-stmt := ;
expression := id expression-assign
expression := logic-expression
expression-assign := = additive-expression
expression-assign := += additive-expression
expression-assign := -= additive-expression
expression-assign := *= additive-expression
expression-assign := /= additive-expression
expression-assign := %= additive-expression
logic-expression := ! compare-expression
logic-expression := compare-expression  logic-expression-other
logic-expression-other := && compare-expression
logic-expression-other := || compare-expression
logic-expression-other := empty
compare-expression := additive-expression relop additive-expression
relop := <=
relop := <
relop := >
relop := >=
relop := ==
relop := !=
additive-expression := term additive-expression*
additive-expression* := addop term additive-expression*
additive-expression* := empty
addop := +
addop := - 
term := factor term*
term*  := mulop factor term*
term*  := empty
mulop := *
mulop := /
mulop := %
factor := ( expression )
factor := id
factor := number